name: Test & Build Multi-Arch Docker Image

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: "${{ matrix.python-version }}"

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: python-deps-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            python-deps-${{ runner.os }}-${{ matrix.python-version }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run unit tests
        run: python -m unittest discover -s tests

  docker:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      image_list: ${{ steps.set_tags.outputs.image_list }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set Docker image tags
        id: set_tags
        run: |
          IMAGE_TAGS="${{ secrets.DOCKERHUB_USERNAME }}/syncmover:latest,${{ secrets.DOCKERHUB_USERNAME }}/syncmover:${{ github.sha }}"
          
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            VERSION_TAG="${GITHUB_REF_NAME}"
            SEMVER_TAG="${VERSION_TAG#v}"
            IMAGE_TAGS="$IMAGE_TAGS,${{ secrets.DOCKERHUB_USERNAME }}/syncmover:${VERSION_TAG},${{ secrets.DOCKERHUB_USERNAME }}/syncmover:${SEMVER_TAG}"
          fi

          echo "tags=$IMAGE_TAGS" >> $GITHUB_OUTPUT

      - name: Build and push multi-arch image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.set_tags.outputs.tags }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/syncmover:latest
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/syncmover:latest,mode=max

      - name: Inspect final image digest
        run: docker buildx imagetools inspect ${{ secrets.DOCKERHUB_USERNAME }}/syncmover:latest

      - name: Save image list as artifact
        run: |
          echo "${{ steps.set_tags.outputs.tags }}" > image_list.txt
        shell: bash

      - uses: actions/upload-artifact@v4
        with:
          name: image_list
          path: image_list.txt

  release:
    needs: docker
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Download image list
        uses: actions/download-artifact@v5
        with:
          name: image_list
          path: .

      - name: Load image list
        id: load_images
        run: |
          IMAGE_LIST=$(cat image_list.txt)
          echo "image_list=$IMAGE_LIST" >> $GITHUB_OUTPUT

      - name: Generate release notes
        id: notes
        uses: release-drafter/release-drafter@v6
        with:
          config-name: release-drafter.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare Docker image list for release notes
        id: prepare_images
        run: |
          IMAGE_LIST="${{ steps.load_images.outputs.image_list }}"
          CHANGED_IMAGES=""

          for img in $(echo "$IMAGE_LIST" | tr ',' ' '); do
            DIG=$(docker buildx imagetools inspect "$img" --format '{{.Digest}}' 2>/dev/null || echo "")
            if [[ -n "$DIG" ]]; then
              CHANGED_IMAGES+="- $img"$'\n'
            fi
          done

          {
            echo "changed_images<<EOF"
            echo -n "$CHANGED_IMAGES"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ github.ref_name }} ${{ inputs.dry-run == 'true' && '⚠️ DRY-RUN' || '' }}
          tag_name: ${{ github.ref_name }}
          body: |
            ${{ steps.notes.outputs.body }}

            ## Docker Images
            ${{ steps.prepare_images.outputs.changed_images }}

            ${{ inputs.dry-run == 'true' && '⚠️ This was a dry-run, images were not pushed!' || '' }}