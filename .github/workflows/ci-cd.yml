name: CI/CD

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: "${{ matrix.python-version }}"

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: python-deps-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            python-deps-${{ runner.os }}-${{ matrix.python-version }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run unit tests
        run: |
          python -m unittest discover -s tests > results.log

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.python-version }}
          path: results.log

  docker:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract version
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Set Docker image tags
        id: set_tags
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          IMAGE_BASE="${{ secrets.DOCKERHUB_USERNAME }}/syncmover"
          IMAGE_TAGS="$IMAGE_BASE:latest|$IMAGE_BASE:${GITHUB_SHA}|$IMAGE_BASE:$VERSION|$IMAGE_BASE:${VERSION#v}"
          echo "tags=$IMAGE_TAGS" >> $GITHUB_OUTPUT

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.set_tags.outputs.tags }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/syncmover:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/syncmover:buildcache,mode=max

      # Save tags into artifact so release job can consume them
      - name: Save image list as artifact
        run: echo "${{ steps.set_tags.outputs.tags }}" > image_list.txt
      - uses: actions/upload-artifact@v4
        with:
          name: image_list
          path: image_list.txt

  release:
    runs-on: ubuntu-latest
    needs: docker
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download image list
        uses: actions/download-artifact@v4
        with:
          name: image_list
          path: .

      - name: Load image list
        id: load_images
        run: |
          IMAGE_LIST=$(cat image_list.txt)
          echo "image_list=$IMAGE_LIST" >> $GITHUB_OUTPUT

      - name: Debug image list
        run: |
          echo "DEBUG: Loaded IMAGE_LIST ->"
          cat image_list.txt

      - name: Compare digests & prepare release notes
        id: compare
        run: |
          IFS='|' read -ra IMAGE_ARRAY <<< "${{ steps.load_images.outputs.image_list }}"

          CHANGED_IMAGES=""
          NEW_DIGEST=$(docker buildx imagetools inspect "${{ secrets.DOCKERHUB_USERNAME }}/syncmover:latest" --format '{{.Digest}}' 2>/dev/null || echo "")

          if [[ -z "$NEW_DIGEST" ]]; then
            echo "ERROR: Could not extract digest from latest image"
            exit 1
          fi

          for img in "${IMAGE_ARRAY[@]}"; do
            DIG=$(docker buildx imagetools inspect "$img" --format '{{.Digest}}' 2>/dev/null || echo "")
            if [[ "$DIG" == "$NEW_DIGEST" ]]; then
              CHANGED_IMAGES+="- $img"$'\n'
            fi
          done

          if [[ -z "$CHANGED_IMAGES" ]]; then
            CHANGED_IMAGES="(No matching digest found â€” check image builds)"
          fi

          {
            echo "changed_images<<EOF"
            echo -n "$CHANGED_IMAGES"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Generate changelog
        run: |
          echo "## Changes" > CHANGELOG.md
          git log $(git describe --tags --abbrev=0 @^)..@ --pretty=format:"- %s" >> CHANGELOG.md

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.docker.outputs.version }}
          body: |
            ## Docker Images Published
            ${{ steps.compare.outputs.changed_images }}

            $(cat CHANGELOG.md)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}