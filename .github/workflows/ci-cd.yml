name: Build & Release Multi-Arch Docker Image

on:
  push:
    branches: ["main"]
    tags: ["v*.*.*"]
  workflow_dispatch:
    inputs:
      dry-run:
        description: 'Run workflow in dry-run mode (no push or release)'
        required: false
        default: 'false'

permissions:
  contents: write

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "${{ matrix.python-version }}"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: python -m unittest discover -s tests

  docker:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      image_list: ${{ steps.set_tags.outputs.image_list }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: ${{ inputs.dry-run != 'true' }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set Docker image tags
        id: set_tags
        run: |
          IMAGE_TAGS="${{ secrets.DOCKERHUB_USERNAME }}/syncmover:latest"
          IMAGE_TAGS="$IMAGE_TAGS,${{ secrets.DOCKERHUB_USERNAME }}/syncmover:${GITHUB_SHA}"

          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            VERSION_TAG="${GITHUB_REF_NAME}"
            SEMVER_TAG="${VERSION_TAG#v}"
            IMAGE_TAGS="$IMAGE_TAGS,${{ secrets.DOCKERHUB_USERNAME }}/syncmover:${VERSION_TAG},${{ secrets.DOCKERHUB_USERNAME }}/syncmover:${SEMVER_TAG}"
          fi

          echo "image_list=$(echo "$IMAGE_TAGS" | tr ',' '\n')" >> $GITHUB_OUTPUT

      - name: Build and push multi-arch Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ inputs.dry-run != 'true' }}
          tags: ${{ steps.set_tags.outputs.image_list }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/syncmover:latest
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/syncmover:latest,mode=max

      - name: Inspect final image
        if: ${{ inputs.dry-run != 'true' }}
        run: docker buildx imagetools inspect ${{ secrets.DOCKERHUB_USERNAME }}/syncmover:latest

  release:
    needs: docker
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate release notes
        id: notes
        uses: release-drafter/release-drafter@v6
        with:
          config-name: release-drafter.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare Docker image list for release
        id: prepare_images
        run: |
          IMAGE_LIST="${{ needs.docker.outputs.image_list }}"
          echo "DEBUG: IMAGE_LIST from docker job:"
          echo "$IMAGE_LIST"

          CHANGED_IMAGES=""
          NEW_DIGEST=$(docker buildx imagetools inspect "${{ secrets.DOCKERHUB_USERNAME }}/syncmover:latest" --format '{{.Digest}}')
          if [[ -z "$NEW_DIGEST" ]]; then
            echo "ERROR: Could not extract digest from latest image"
            exit 1
          fi

          while IFS= read -r img; do
            [[ -z "$img" ]] && continue
            DIG=$(docker buildx imagetools inspect "$img" --format '{{.Digest}}' || echo "")
            if [[ "$DIG" == "$NEW_DIGEST" ]]; then
              CHANGED_IMAGES+="- $img"$'\n'
            fi
          done <<< "$IMAGE_LIST"

          echo "changed_images<<EOF" >> $GITHUB_OUTPUT
          echo -n "$CHANGED_IMAGES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ github.ref_name }} ${{ inputs.dry-run == 'true' && '⚠️ DRY-RUN' || '' }}
          tag_name: ${{ github.ref_name }}
          body: |
            ${{ steps.notes.outputs.body }}

            ## Docker Images
            ${{ steps.prepare_images.outputs.changed_images }}

            ${{ inputs.dry-run == 'true' && '⚠️ This was a dry-run, images were not pushed!' || '' }}