name: Test & Build Multi-Arch Docker Image

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      dry-run:
        description: 'Run workflow in dry-run mode (no push or release)'
        required: false
        default: 'false'

permissions:
  contents: write

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: python-deps-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            python-deps-${{ runner.os }}-${{ matrix.python-version }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run unit tests
        run: python -m unittest discover -s tests

  docker:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      image_list: ${{ steps.export_tags.outputs.image_list }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: ${{ github.event_name != 'workflow_dispatch' || inputs.dry-run != 'true' }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # --- FIX: generate consistent tags/labels (latest, sha, semver + vsemver) ---
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/syncmover
          tags: |
            # latest for main and tags
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' || startsWith(github.ref,'refs/tags/') }}
            # always publish a sha tag
            type=sha
            # only on tag refs, publish 1.2.3 and v1.2.3
            type=semver,pattern={{version}},enable=${{ startsWith(github.ref,'refs/tags/') }}
            type=semver,pattern=v{{version}},enable=${{ startsWith(github.ref,'refs/tags/') }}

      - name: Debug resolved tags
        run: |
          echo "Resolved tags from metadata-action:"
          printf '%s\n' "${{ steps.meta.outputs.tags }}"

      # --- FIX: push is true unless workflow_dispatch + dry-run true ---
      - name: Build and push multi-arch image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'workflow_dispatch' || inputs.dry-run != 'true' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/syncmover:latest
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/syncmover:latest,mode=max

      # Make IMAGE_LIST available to later steps and jobs
      - name: Export tag list for downstream jobs
        id: export_tags
        run: |
          # Export to env for any later steps in this job
          {
            echo "IMAGE_LIST<<EOF"
            echo "${{ steps.meta.outputs.tags }}"
            echo "EOF"
          } >> "$GITHUB_ENV"

          # Also expose as job output for other jobs
          {
            echo "image_list<<EOF"
            echo "${{ steps.meta.outputs.tags }}"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Inspect final image digest
        if: ${{ github.event_name != 'workflow_dispatch' || inputs.dry-run != 'true' }}
        run: docker buildx imagetools inspect ${{ secrets.DOCKERHUB_USERNAME }}/syncmover:latest

release:
  needs: docker
  runs-on: ubuntu-latest
  if: startsWith(github.ref, 'refs/tags/')
  steps:
    - name: Checkout repository (with full history)
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Generate release notes
      id: notes
      uses: release-drafter/release-drafter@v6
      with:
        config-name: release-drafter.yml
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Prepare Docker image list for release notes
      id: prepare_images
      env:
        IMAGE_LIST: ${{ needs.docker.outputs.image_list }}
        DOCKER_IMAGE_BASE: ${{ secrets.DOCKERHUB_USERNAME }}/syncmover
      run: |
        echo "DEBUG: IMAGE_LIST is ->"
        echo "$IMAGE_LIST"

        CHANGED_IMAGES=""

        NEW_DIGEST=$(docker buildx imagetools inspect "${DOCKER_IMAGE_BASE}:latest" --format '{{ .Digest }}' 2>/dev/null || echo "")
        if [[ -z "$NEW_DIGEST" ]]; then
          echo "ERROR: Could not extract digest from latest image"
          exit 1
        fi

        while IFS= read -r img; do
          [[ -z "$img" ]] && continue
          DIG=$(docker buildx imagetools inspect "$img" --format '{{ .Digest }}' 2>/dev/null || echo "")
          if [[ "$DIG" == "$NEW_DIGEST" ]]; then
            CHANGED_IMAGES+="- $img"$'\n'
          fi
        done <<< "$IMAGE_LIST"

        {
          echo "changed_images<<EOF"
          echo -n "$CHANGED_IMAGES"
          echo "EOF"
        } >> "$GITHUB_OUTPUT"

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        name: Release ${{ github.ref_name }} ${{ inputs.dry-run == 'true' && '⚠️ DRY-RUN' || '' }}
        tag_name: ${{ github.ref_name }}
        body: |
          ${{ steps.notes.outputs.body }}

          ## Docker Images
          ${{ steps.prepare_images.outputs.changed_images }}

          ${{ inputs.dry-run == 'true' && '⚠️ This was a dry-run, images were not pushed!' || '' }}